/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ps_push.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: doligtha <doligtha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/09 04:44:59 by doligtha          #+#    #+#             */
/*   Updated: 2024/05/16 17:43:29 by doligtha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdint.h>
#include "pushswap.h"

bool	push_a(size_t *prev, size_t *next, t_stack *stack)
{
	size_t	tmp[3];

	if (stack->a != SIZE_MAX)
	{
		*tmp = stack->a;
		tmp[1] = prev[stack->a];
		tmp[2] = next[stack->a];
		stack->a = next[stack->a];
		if (stack->a == *tmp)
			stack->a = SIZE_MAX;
		else
		{
			next[tmp[1]] = tmp[2];
			prev[tmp[2]] = tmp[1];
		}
		push_insert(prev, next, stack->b, *tmp);
		if (stack->print == true)
		{
			stack->move_count++;
			if (write(stack->fd, "pa\n", 3) == -PS_ERROR)
				return (false);
		}
	}
	return (true);
}

bool	push_b(size_t *prev, size_t *next, t_stack *stack)
{
	size_t	tmp[3];

	if (stack->b != SIZE_MAX)
	{
		*tmp = stack->b;
		tmp[1] = prev[stack->b];
		tmp[2] = next[stack->b];
		stack->b = next[stack->b];
		if (stack->b == *tmp)
			stack->b = SIZE_MAX;
		next[tmp[1]] = tmp[2];
		prev[tmp[2]] = tmp[1];
		push_insert(prev, next, stack->a, *tmp);
		if (stack->print == true)
		{
			stack->move_count++;
			if (write(stack->fd, "pa\n", 3) == -PS_ERROR)
				return (false);
		}
	}
	return (true);
}
